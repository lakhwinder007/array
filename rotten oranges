 bool isvalid(int x,int y,vector<vector<int>>&grid){
         int n=grid.size();
        int m=grid[0].size();
        if(x<0||y<0||x>=n||y>=m)return false;
        else return true;
    }
    int orangesRotting(vector<vector<int>>& grid) {
     
        // Code here
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<int,int>>q;
        int count=0;     //count=count of not rotten oranges  now , at end when all oranges are rotten count=0
                         //
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]!=0)count++;
                if(grid[i][j]==2){q.push({i,j});
                count--;}
            }
        }
        int time=0;
        while(q.size()){
            int size=q.size();
            if(count==0)break;
            time++;
            for(int i=0;i<size;i++){
                auto temp=q.front();
                q.pop();
                int row=temp.first;
                int col=temp.second;
                //left
                if(isvalid(row,col-1,grid)&&grid[row][col-1]==1){
                    grid[row][col-1]=2;
                    q.push({row,col-1});
                    count--;
                }
                //right
                if(isvalid(row,col+1,grid)&&grid[row][col+1]==1){
                    grid[row][col+1]=2;
                    q.push({row,col+1});
                    count--;
                }
                  if(isvalid(row-1,col,grid)&&grid[row-1][col]==1){
                    grid[row-1][col]=2;
                    q.push({row-1,col});
                    count--;
                }
                if(isvalid(row+1,col,grid)&&grid[row+1][col]==1){
                    grid[row+1][col]=2;
                    q.push({row+1,col});
                    count--;
                };
            }
            
              
        }
         for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1)return -1;
            }
        }
        return time;
    }
